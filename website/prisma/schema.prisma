// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Song {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())

    name   String
    artist String
    sheets Sheet[]

    @@unique([name, artist])
}

model Sheet {
    trackCount Int
    bars       Bar[]
    notes      Note[]

    Song   Song   @relation(fields: [songId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    songId String

    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
}

model Bar {
    beatCount   Int
    dibobinador Int
    tempo       Int
    start       Float
    capacity    Float
    index       Int

    Sheet   Sheet?  @relation(fields: [sheetId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    sheetId String?

    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
}

model Note {
    trackIndex Int
    start      Float
    duration   Float
    pitch      String?
    hasSustain Boolean @default(false)
    isSustain  Boolean @default(false)

    Sheet   Sheet?  @relation(fields: [sheetId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    sheetId String?

    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
}

// Example from docs

// model Post {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   title     String   @db.VarChar(255)
//   content   String?
//   published Boolean  @default(false)
//   author    User     @relation(fields: [authorId], references: [id])
//   authorId  Int
// }

// model Profile {
//   id     Int     @id @default(autoincrement())
//   bio    String?
//   user   User    @relation(fields: [userId], references: [id])
//   userId Int     @unique
// }

// model User {
//   id      Int      @id @default(autoincrement())
//   email   String   @unique
//   name    String?
//   posts   Post[]
//   profile Profile?
// }
